lines(fit4h$mean,col = "cyan", type= "o")
# with implicit Test set... it figures out by the time which are training and which are test.
accuracy(fit1h, ausair)
accuracy(fit2h, ausair)
accuracy(fit3h, ausair)
#with explicit Test set ... (same output)
airTest = window(ausair, start = 2005)
accuracy(fit1h, airTest)
accuracy(fit2h, airTest)
accuracy(fit3h, airTest)
#Load the data
data("austourists")
# Read about the dataset!
?austourists
# Always plot the data first!
plot(austourists)
# returns a ts object.
aust = window(austourists,start = 1999, end = 2004)
#fit an additive and multiplicative model
fit1s = hw(aust,seasonal = "additive",h = 40)
fit2s = hw(aust,seasonal = "multiplicative",h = 40)
#Plot the original data
plot(aust,ylab = "Australian Tourists", xlab = "Year", type = "o", xlim = c(1999, 2014),ylim = c(15,60))
#add the fitted values from the model (of the training data)
lines(fitted(fit1s),col = "blue", type= "o")
lines(fitted(fit2s), col = "red", type= "o")
#Now add the forecasts (add these one at a time)
lines(fit1s$mean, col = "blue", type= "o")
lines(fit2s$mean,col = "red", type= "o")
#Compare the accuracy
accuracy(fit1s,austourists)
accuracy(fit2s,austourists)
#add the actual values to visually compare the forecasts to the actual values.
points(austourists, type = "o")
install.packages
install.packages("dygraphs")
library(dygraphs)
ollivander = read.csv(file.choose(),header = FALSE)
gregorovitch = read.csv(file.choose(),header = FALSE)
str(gregorovitch)
ollivander$V1 = as.Date(ollivander$V1,"%m/%d/%Y")
str(ollivander)
gregorovitch$V1 = as.Date(gregorovitch$V1,"%m/%d/%Y")
library(tswge)
####### Unit 10 IN CLASS
#Cochran Orcutt vs OLS vs fore.sigplusnoise.wge()
library(orcutt)
?cochrane.orcutt
# office hour fiti cosine
data(patemp)
plotts.sample.wge(patemp)
factor.wge(c(rep(0,11),1))
# Try sine
f = fore.sigplusnoise.wge(patemp,linear = FALSE, freq = 0.08333, max.p = 0, n.ahead = 12 )
f$phi.z
f$b
var(f$resid)
f1 = fore.sigplusnoise.wge(patemp,linear = FALSE, freq = 0.08333, max.p = 0, lastn = T, n.ahead = 24 )
f1$f
length(patemp)
ASE_Cos = mean((f1$f-patemp[(180-24+1):180])^2)
ASE_Cos
f2 = fore.arima.wge(patemp, s=12, lastn=T, n.ahead = 24)
ASE_12 = mean((f2$f-patemp[(180-24+1):180])^2)
ASE_12
f2$wnv
data("hadley")
x = hadley
n=length(x)
t=1:n
d=lm(x~t) x.z=x-d$coefficients[1]-d$coefficients[2]*t
d=lm(x~t)
x.z=x-d$coefficients[1]-d$coefficients[2]*t
ar.z=aic.wge(x.z,p=0:6)
ar.z$p
x.trans=artrans.wge(hadley,phi.tr=ar.z$phi)
t.trans=artrans.wge(t,phi.tr=ar.z$phi)
fit = lm(y.trans~t.trans)
summary(fit)
fit = lm(x.trans~t.trans)
summary(fit)
cfit = cochrane.orcutt(d)
summary(cfit)
xa50 = gen.arma.wge(xa50)
library(tswge)
xa50 = gen.arma.wge(xa50)
xa50 = gen.arma.wge(xa50)
xa50 = gen.arma.wge(n=200, phi = c(1.5, -1.21, .455), mu=50)
aic5.wge(xa50)
xa50.r = est.ar.wge(xa50, p=3)
plotts.true.wge(phi=xa50.r$phi)
plotts.sample.wge(xa50)
acf(xa50.r$res)
ljung.wge(xa50.r$res, K=24, p=3, q=0)
ljung.wge(xa50.r$res, K=48, p=3, q=0)
fore.arma.wge(xa50, phi=xa50.r$phi, n.ahead=20, lastn=TRUE)
fore.arma.wge(xa50, phi=xa50.r$phi, n.ahead=10, lastn=TRUE)
?gen.arma.wge
gen.arma.wge(n=200, phi=xa50.r$phi)
gen.arma.wge(n=200, phi=xa50.r$phi)
xa50.r$phi
#### Wtcrude
data("wtcrude")
plotts.sample.wge(wtcrude)
aic5.wge(wtcrude)
aic5.wge(wtcrude, p=0:10, q=0:5)
est = est.arma.wge(wtcrude, p=7, q=2)
acf(est$res)
ljung.wge(est$res, p=7, q=2)
ljung.wge(est$res, p=7, q=2, K=48)
plotts.sample.wge(est$res, arlimits = TRUE)
plotts.true.wge(phi=est$phi)
plotts.sample.wge(wtcrude)
1/0.28
# ARMA spectral estimator shows two peaks, one at f=- and another at around f=0.28
# The peak at approximately .3 seems to be spurious as it doesn't appear in periodogram or the parzen spectral estimator
fore.arma.wge(wtcrude, phi=est$phi, n.ahead=10, lastn=TRUE)
fore.arma.wge(wtcrude, phi=est$phi, n.ahead=20, lastn=TRUE)
est$avar
wt1 = gen.arma.wge(n=118, phi=est$phi, vara = est$avar)
wt1m = wt1 + mean(wtcrude)
plotts.sample.wge(wt1m)
data("eco.mort30")
plotts.sample.wge(eco.mort30)
m8.5 = mult.wge(fac1 = c(0,0,0,0,0,.999), fact2 = .759)
m8.5 = mult.wge(fac1 = c(0,0,0,0,0,1), fac2 = .759)
plotts.true.wge(phi = m8.5$model.coef)
m8.5 = mult.wge(fac1 = c(0,0,0,0,0,0.99999), fac2 = .759)
plotts.true.wge(phi = m8.5$model.coef)
library(nnfor)
?mlp
library(tswge)
data(airlog)
frequency(airlog)
data("wtcrude2020")
wtcrude2020
AR1Fit = mlp(wtcrude2020, m=1, hd=0, lags=1, difforder=0, reps=5)
plot(AR1Fit)
rwAR1Fit = roll.win.rmse.nn.wge(wtcrude2020, horizon=1, fit_model = AR1Fit)
AR1Fit$sdummy
?cov
a = c(1,3,-1)
b = c(1, 0, -1)
cov(a,b)
var(a)
?cov()
cov
library(tidyverse)
library(agricolae)
handicapData = read_csv(file="/Users/mingyang/Desktop/SMU/StatisticalFoundation_Fall2020/MSDS_6371_Stat_Foundations/Unit 6/HandicapData.csv")
handicapData$Handicap = as.factor(handicapData$Handicap)
handicapData.av = aov(Score~Handicap,data=handicapData)
summary(handicapData.av)
?qf
qf(0.05, 4, 65)
sqrt(0.4*0.6/1004)
qz
?qnorm
qnorm(0.05)
pnorm(-1.91)
#libraries
library(tswge)
library(dplyr)
library(tidyverse)
library(readxl)
# Set this to data folder for your file
setwd("/Users/mingyang/Desktop/SMU/TimeSeries/TimeSeriesFinalProject/data")
# Read in DFWA electricity Data
dfwa.electricity = read.csv("AVG_ELEC_DFWA_TX.csv",col.names = c("DATE", "AVG_EP"),
colClasses = c(DATE="character", AVG_EP="character"))
# Read in CPI data for Southern Urban area
cpi = read_excel("SouthernUrbanCPI.xlsx",sheet = "BLS Data Series", skip = 11)
# Getting rid of Half1 and Half2 which starts with S
cpi = cpi %>% filter(!grepl('S',Period) )
# Getting rid of Annual which labeled as M13
cpi = cpi %>% filter(!grepl('M13',Period) )
# Read in Gas Price data from same area
gas.price = read.csv("Dallas_FWA_GAS.csv")
# Read in Temperature Data & cleaning
temp = read_excel("DallasAreaTemp.xlsx", sheet = "Sheet1")
temp = temp %>% tidyr::pivot_longer(
cols = starts_with("Mon_"),
names_to = "Month",
values_to = "Temperature"
)
temp = temp[1:386,]
# subset dataset
# which(dfwa.electricity$DATE=="1990-01-01") # 135
dfwa.electricity = dfwa.electricity[135:520,]
rownames(dfwa.electricity) <- 1:nrow(dfwa.electricity)
# which(cpi$Year==1990 & cpi$Period=="M01")
cpi = cpi[91:476,]
rownames(cpi) <- 1:nrow(cpi)
# which(gas.price$DATE=="1990-01-01") # 145
gas.price = gas.price[145:530,]
rownames(gas.price) <- 1:nrow(gas.price)
#### Creating ultimate data frame under variable 'df' ####
df = dfwa.electricity
df$CPI = cpi$Value
df$GAS_P = gas.price$APUS37A7471A
df$AVG_EP = as.numeric(df$AVG_EP)
df$TEMP = temp$Temperature
#### Due to distribution market deregulation in 1995, team decided to cut the realization
#### prior to 2000
# which(df$DATE=="2000-01-01") # 121
df = df[121:386,]
rownames(df) <- 1:nrow(df)
plotts.wge(df$AVG_EP)
plotts.wge(df$CPI)
plotts.wge(df$GAS_P)
plotts.wge(df$TEMP)
# There seem to be a slowly damping behavior which might support difference the data
plotts.sample.wge(df$AVG_EP)
# Try overfitting
est = est.ar.wge(df$AVG_EP, p=16, type='burg')
# compare this to seasonality of 12
factor.wge(phi = c(rep(0,11),1))
# By using overfitting method, 1-B term seems to have the largest absolute reciprocal root which by itself supports differencing the data
# Additionally, there seem to have a 1-B^12 seasonality, even some of the factors such as 1+B at system frequency of -.5 and 1+1.73B+1B^2 at System frequency of 0.4167 are not as close to the unit circle. Although it might worth exploring s = 12 also
d1 = artrans.wge(df$AVG_EP, phi.tr = 1)
# with the differenced data there seem to have some sort of seasonal behavior at 12 left
d1.12 = artrans.wge(d1, phi.tr = c(rep(0,11),0.4))
dev.off()
acf(d1.12) # AIC looks about white noise
ljung.wge(d1.12, K=24) # K=24 reject white noise hypothesis
ljung.wge(d1.12, K=48) # K = 48 reject white noise
# Thus models require further modeling
# est1.12 = aic5.wge(d1.12, p=0:15, q=0:5) # AIC picked p = 7, q=4
# est.1.12.bic = aic5.wge(d1.12, p=0:15, q=0:5, type = 'bic') # bic picked p=0, q=0
# est.1.12.aicc = aic5.wge(d1.12, p=0:15, q=0:5, type = 'aicc') # aicc picked p=1, q=0
# seems AIC leaning towards a fancy model, while bic leaning towards white noise.
# I will attempt something in the middle by using AR(1) instead
params.est = est.arma.wge(d1.12, p=1)
acf(params.est$res) # residuals looks about white noise
ljung.wge(params.est$res, K=24) # K=24 reject white noise hypothesis
ljung.wge(params.est$res, K=48) # K = 48reject null hypothesis of white noise
# Try facier model identified by AIC
params.est = est.arma.wge(d1.12, p=7,q=4)
acf(params.est$res) # residuals looks about white noise
ljung.wge(params.est$res, K=24) # K=24 fail to reject white noise hypothesis
ljung.wge(params.est$res, K=48) # K = 48 fail to reject null hypothesis of white noise
# All models are wrong some are useful - we will proceed with fancier model for now
model1.param = mult.wge(fac1 = params.est$phi, fac2 = c(rep(0,11),0.4))
pred.short = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 3, limits = T, lastn = T)
ASE.short = mean((df$AVG_EP[264:266]-pred.short$f)^2)
ASE.short # 3.184093e-05 -> 0.0000318  #New 5.988891e-05 -> 0.0000599
pred.long = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 36, limits = T, lastn = T)
ASE.long = mean((df$AVG_EP[(266-36+1):266]-pred.long$f)^2)
ASE.long # 0.0001725023
# rolling.res.short = roll.win.rmse.wge(df$AVG_EP,phi = model1.param$model.coef, theta = params.est$theta, d = 1, horizon = 3 )
# rolling.res.short # RMSE = 0.004, ASE = 1.6e-0.5 -> 0.000016, nums of windows = 239
# rolling.res.long = roll.win.rmse.wge(df$AVG_EP,phi = model1.param$model.coef, theta = params.est$theta, d = 1, horizon = 36)
# rolling.res.long # RMSE = 0.014, ASE= 0.000196, num of windows = 206
library(ggplot2)
df[['DATE']] <- as.Date(df[['DATE']], format='%Y-%m-%d')
colors <- c("Actual Price" = "#FC4E07", "Predicted Price" = "#E7B800", "Prediction Limit"= "#E7B800")
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
geom_point() +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price")
ggplot(data = df[260:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price") +
geom_line(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.1) +
geom_point(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.5)+
geom_line(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_line(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
scale_color_manual(values = colors) + theme_classic()
ggplot(data = df[260:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price") +
geom_line(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.1) +
geom_point(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.5)+
geom_line(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_line(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
scale_color_manual(values = colors) + theme_classic()
# Convert short term prediction to dataframe
pred.short.df = data.frame(Date = df$DATE[264:266], prediction = pred.short$f, upper = pred.short$ul, lower = pred.short$ll)
ggplot(data = df[260:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price") +
geom_line(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.1) +
geom_point(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.5)+
geom_line(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_line(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
scale_color_manual(values = colors) + theme_classic()
colors <- c("Actual Price" = "#00AFBB", "Predicted Price" = "#E7B800", "Prediction Limit"= "#E7B800")
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
geom_point() +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price")
ggplot(data = df[260:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price") +
geom_line(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.1) +
geom_point(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.5)+
geom_line(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_line(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
scale_color_manual(values = colors) + theme_classic()
colors <- c("Actual Price" = "#00AFBB", "Predicted Price" = "#FC4E07", "Prediction Limit"= "#E7B800")
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
geom_point() +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price")
ggplot(data = df[260:266,], aes(x=DATE, y=AVG_EP, color="Actual Price"))+
geom_line( size = 1) +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price") +
geom_line(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.1) +
geom_point(data = pred.short.df,aes(x=Date, y=prediction), color="#FC4E07", size=1.5)+
geom_line(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=upper), color="#E7B800", size=1.1)+
geom_line(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
geom_point(data = pred.short.df,aes(x=Date, y=lower), color="#E7B800", size=1.1)+
scale_color_manual(values = colors) + theme_classic()
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP, color="#00AFBB"))+
geom_line( size = 1) +
geom_point() +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price")
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP))+
geom_line(color="#00AFBB", size = 1) +
geom_point() +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price")
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP))+
geom_line(color="#00AFBB", size = 1) +
geom_point(color="#00AFBB") +
ggtitle("Short term average Electricity price forecast")+xlab("Date")+ylab("Average Price")
# Original TS plot:
ggplot(data = df[1:266,], aes(x=DATE, y=AVG_EP))+
geom_line(color="#00AFBB", size = 1) +
geom_point(color="#00AFBB") +
ggtitle("Electricity Price Over time")+xlab("Date")+ylab("Average Price") + theme_classic()
# There seem to be a slowly damping behavior which might support difference the data
plotts.sample.wge(df$AVG_EP)
# Try overfitting
est = est.ar.wge(df$AVG_EP, p=16, type='burg')
# compare this to seasonality of 12
factor.wge(phi = c(rep(0,11),1))
d1 = artrans.wge(df$AVG_EP, phi.tr = 1)
d1 = artrans.wge(df$AVG_EP, phi.tr = 1)
d1 = artrans.wge(df$AVG_EP, phi.tr = 1)
# with the differenced data there seem to have some sort of seasonal behavior at 12 left
d1.12 = artrans.wge(d1, phi.tr = c(rep(0,11),0.4))
# with the differenced data there seem to have some sort of seasonal behavior at 12 left
d1.12 = artrans.wge(d1, phi.tr = c(rep(0,11),1))
# with the differenced data there seem to have some sort of seasonal behavior at 12 left
d1.12 = artrans.wge(d1, phi.tr = c(rep(0,11),0.4))
# Try facier model identified by AIC
params.est = est.arma.wge(d1.12, p=7,q=4)
acf(params.est$res) # residuals looks about white noise
ljung.wge(params.est$res, K=24) # K=24 fail to reject white noise hypothesis
ljung.wge(params.est$res, K=48) # K = 48 fail to reject null hypothesis of white noise
# All models are wrong some are useful - we will proceed with fancier model for now
model1.param = mult.wge(fac1 = params.est$phi, fac2 = c(rep(0,11),0.4))
params.est$phi
params.est$theta
params.est$res
sum(params.est$res)
sse = sum(params.est$res)
sse = sum(params.est$res^2)
sse
params.est$res^2
sse = sum(params.est$res^2)
253*log(sse/n)+2*(7+4+1)
253*log(sse/n)+2*(7 + 4 + 1)
253*log(sse/253)+2*(7 + 4 + 1)
plotts.sample.wge(df$AVG_EP)
# take difference and look at acf
AVE_EP_d1 = artrans.wge(df$AVG_EP,phi.tr=1)
dev.off()
acf(AVE_EP_d1)
plotts.sample.wge(AVE_EP_d1)
# characteristic seasonal component for 12 months (ACF large at multiples of 12)
AVE_EP_d1_s12 = artrans.wge(AVE_EP_d1,phi.tr=c(rep(0,11),1))
plotts.sample.wge(AVE_EP_d1_s12)
dev.off()
acf(AVE_EP_d1_s12)
# doesn't look like white noise
# aic5.wge(AVE_EP_d1_s12,p=0:15) #13,0 12,2 12,0
EP_est = est.arma.wge(AVE_EP_d1_s12,p=12)
# short 3 month ARUMA(12,1,0) s=12
# roll.win.ase.wge(df$AVG_EP,horizon=3,s=12,d=1,phis=EP_est$phi,thetas=EP_est$theta)
#   2.8495e-05 -> 0.0000285
f.short = fore.aruma.wge(df$AVG_EP,phi=EP_est$phi,theta=EP_est$theta,s=12,d=1,n.ahead=3,lastn=TRUE)
ASE.short = mean((df$AVG_EP[264:266]-f.short$f)^2)
ASE.short #3.595854e-05 -> 0.000036
sse = (EP_est$res^2)
sse
sse = sum(EP_est$res^2)
253*log(sse/253)+2*(12+1)
plotts.sample.wge(df$AVG_EP)
# slowly damping autocorrelations
# spectral density peaks at 0 (wandering behavior)
# possible seasonal peak at 1/12 = .0833333 (monthly)
# est.ar.wge(df$AVG_EP,p=15,type="burg")
# factor.wge(phi=c(rep(0,11),1))
# some evidence of s=12 in overfit, though Abs Recip should be a higher
# take difference and look at acf
AVE_EP_d1 = artrans.wge(df$AVG_EP,phi.tr=1)
dev.off()
acf(AVE_EP_d1)
plotts.sample.wge(AVE_EP_d1)
# characteristic seasonal component for 12 months (ACF large at multiples of 12)
AVE_EP_d1_s12 = artrans.wge(AVE_EP_d1,phi.tr=c(rep(0,11),1))
plotts.sample.wge(AVE_EP_d1_s12)
dev.off()
acf(AVE_EP_d1_s12)
# doesn't look like white noise
# aic5.wge(AVE_EP_d1_s12,p=0:15) #13,0 12,2 12,0
EP_est = est.arma.wge(AVE_EP_d1_s12,p=12)
# short 3 month ARUMA(12,1,0) s=12
# roll.win.ase.wge(df$AVG_EP,horizon=3,s=12,d=1,phis=EP_est$phi,thetas=EP_est$theta)
#   2.8495e-05 -> 0.0000285
f.short = fore.aruma.wge(df$AVG_EP,phi=EP_est$phi,theta=EP_est$theta,s=12,d=1,n.ahead=3,lastn=TRUE)
ASE.short = mean((df$AVG_EP[264:266]-f.short$f)^2)
ASE.short #3.595854e-05 -> 0.000036
# long 36 month ARUMA(12,1,0) s=12
# roll.win.ase.wge(df$AVG_EP,horizon=36,s=12,d=1,phis=EP_est$phi,thetas=EP_est$theta)
# 0.0004547268
f.long = fore.arima.wge(df$AVG_EP,phi=EP_est$phi,theta=EP_est$theta,s=12,d=1,n.ahead=36,lastn=TRUE)
ASE.long = mean((df$AVG_EP[(266-36+1):266]-f.long$f)^2)
ASE.long
#0.001223659
# try other AIC5 options with long forecast: ARUMA(13,1,0) s=12
EP_est_13 = est.arma.wge(AVE_EP_d1_s12,p=13)
# roll.win.ase.wge(df$AVG_EP,horizon=36,s=12,d=1,phis=EP_est_13$phi,thetas=EP_est_13$theta)
#   0.0004697769
f = fore.arima.wge(df$AVG_EP,phi=EP_est_13$phi,theta=EP_est_13$theta,s=12,d=1,n.ahead=36,lastn=TRUE)
mean((df$AVG_EP[(266-36+1):266]-f$f)^2)
#0.001237814
# try 12,2 ARUMA(12,1,2) s=12
EP_est_12_2 = est.arma.wge(AVE_EP_d1_s12,p=12,q=2)
# roll.win.ase.wge(df$AVG_EP,horizon=36,s=12,d=1,phis=EP_est_12_2$phi,thetas=EP_est_12_2$theta)
#  0.0004835913
f = fore.arima.wge(df$AVG_EP,phi=EP_est_12_2$phi,theta=EP_est_12_2$theta,s=12,d=1,n.ahead=36,lastn=TRUE)
mean((df$AVG_EP[(266-36+1):266]-f$f)^2)
# 0.00128316
# None of these beat Nick's ARUMA(13,1,5) s=12
# Try another model entirely - take 1st diff then fit an ARMA
AVE_EP_d1 = artrans.wge(df$AVG_EP,phi.tr=1)
# aic5.wge(AVE_EP_d1,p=0:15,q=0:5) #15,5
# aic5.wge(AVE_EP_d1,p=10:20,q=0:5) #15,5
# aic5.wge(AVE_EP_d1,p=0:15,q=0:5,type="bic") #12,0 13,1
# ARIMA(15,1,5)
EP_est_15_5 = est.arma.wge(AVE_EP_d1,p=15,q=5)
# short 3 month
# roll.win.ase.wge(df$AVG_EP,horizon=3,d=1,phis=EP_est_15_5$phi,thetas=EP_est_15_5$theta)
#   3.695999e-05
dev.off()
f.short.15.5 = fore.arima.wge(df$AVG_EP,phi=EP_est_15_5$phi,theta=EP_est_15_5$theta,d=1,n.ahead=3,lastn=TRUE)
ASE.short = mean((df$AVG_EP[264:266]-f.short.15.5$f)^2)
ASE.short #4.216765e-05 -> 0.000042167
# 36 month ARIMA(15,1,5)
# roll.win.ase.wge(df$AVG_EP,horizon=36,d=1,phis=EP_est_15_5$phi,thetas=EP_est_15_5$theta)
# 0.0002368869
f.long.15.5 = fore.arima.wge(df$AVG_EP,phi=EP_est_15_5$phi,theta=EP_est_15_5$theta,d=1,n.ahead=36,lastn=TRUE)
ASE.long = mean((df$AVG_EP[(266-36+1):266]-f.long.15.5$f)^2)
ASE.long
# 0.0001089089
# ARIMA(12,1,0)
EP_est_12_0 = est.arma.wge(AVE_EP_d1,p=12)
# short 3 month
# roll.win.ase.wge(df$AVG_EP,horizon=3,d=1,phis=EP_est_12_0$phi)
#  2.661653e-05
f.short.12.0 = fore.arima.wge(df$AVG_EP,phi=EP_est_12_0$phi,d=1,n.ahead=3,lastn=TRUE)
ASE.short = mean((df$AVG_EP[264:266]-f.short.12.0$f)^2)
ASE.short # 8.029078e-05 -> 0.0000803
# 36 month ARIMA(12,1,0)
# roll.win.ase.wge(df$AVG_EP,horizon=36,d=1,phis=EP_est_12_0$phi)
# 0.0002323361
f.long.12.0 = fore.arima.wge(df$AVG_EP,phi=EP_est_12_0$phi,d=1,n.ahead=36,lastn=TRUE)
ASE.long = mean((df$AVG_EP[(266-36+1):266]-f.long.12.0$f)^2)
ASE.long
# 0.0001502498
EP_est_12_0$res
sse = sum(EP_est_12_0^2)
sse = sum(EP_est_12_0$res^2)
265*log(sse/265)+(12+1)*2
sse = sum(EP_est_15_5$res^2)
sse
EP_est_15_5
sse = sum(EP_est_15_5$res^2)
265*log(sse/265)+(15+1+5)*2
d = 1, n.ahead = 3, limits = T, lastn = F)
pred.long = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 36, limits = T, lastn = F)
# Convert short term prediction to dataframe
pred.short = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 3, limits = T, lastn = F)
pred.long = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 36, limits = T, lastn = F)
df$DATE[264:266]
# Convert short term prediction to dataframe
pred.short = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 3, limits = T, lastn = F)
pred.long = fore.arima.wge(df$AVG_EP, phi = model1.param$model.coef, theta = params.est$theta,
d = 1, n.ahead = 36, limits = T, lastn = F)
